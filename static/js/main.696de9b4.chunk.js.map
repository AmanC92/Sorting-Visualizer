{"version":3,"sources":["SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["mergeSort","array","tempArray","start","end","animations","middle","Math","floor","index","firstHalf","secondHalf","push","i","sortArray","bubbleSort","temp","flag","loopCount","length","heapSort","heap","heapInsert","heapRemove","num","childNode","parentNode","iteration","largest","childNodeLeft","childNodeRight","splice","undefined","quickSort","pivotIndex","leftIndex","rightIndex","quickSortPartition","SortingVisualizer","props","state","this","resetArray","arrayLength","window","innerWidth","height","innerHeight","console","log","random","setState","slice","bars","document","getElementsByClassName","setTimeout","idx1","idx2","style","backgroundColor","whileRunning","idx1Height","idx2Height","time","id","buttons","forEach","element","getElementById","disabled","color","border","timerLength","ceil","timer","totalSeconds","textContent","min","seconds","algorithim","mergeSortArray","bubbleSortArray","heapSortArray","quickSortArray","sort","a","b","mergeFlag","bubbleFlag","heapFlag","quickFlag","className","display","onClick","width","margin","map","value","idx","key","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAAO,SAASA,EAAUC,EAAOC,EAAWC,EAAOC,EAAKC,GACvD,IAAMC,EAASC,KAAKC,OAAOL,EAAQC,GAAO,GAGtCD,GAASC,IAGZJ,EAAUC,EAAOC,EAAWC,EAAOG,EAAQD,GAC3CL,EAAUC,EAAOC,EAAWI,EAAS,EAAGF,EAAKC,GAO/C,SAAmBJ,EAAOC,EAAWC,EAAOG,EAAQF,EAAKC,GACxD,IAAII,EAAQN,EACRO,EAAYP,EACZQ,EAAaL,EAAS,EAI1B,KAAOI,GAAaJ,GAAUK,GAAcP,GAG3CC,EAAWO,KAAK,CAAEF,EAAWC,IAG7BN,EAAWO,KAAK,CAAEF,EAAWC,IAIzBV,EAAMS,IAAcT,EAAMU,IAC7BT,EAAUO,GAASR,EAAMS,GAIzBL,EAAWO,KAAK,CAAEH,EAAOR,EAAMS,KAE/BA,MAEAR,EAAUO,GAASR,EAAMU,GAIzBN,EAAWO,KAAK,CAAEH,EAAOR,EAAMU,KAE/BA,KAGDF,IAKD,GAAIC,GAAaJ,EAChB,IAAK,IAAIO,EAAIH,EAAWG,GAAKP,EAAQO,IACpCX,EAAUO,GAASR,EAAMY,GAIzBR,EAAWO,KAAK,CAAEC,EAAGA,IAIrBR,EAAWO,KAAK,CAAEC,EAAGA,IAIrBR,EAAWO,KAAK,CAAEH,EAAOR,EAAMY,KAE/BJ,IAMF,GAAIE,GAAcP,EACjB,IAAK,IAAIS,EAAIF,EAAYE,GAAKT,EAAKS,IAClCX,EAAUO,GAASR,EAAMY,GAIzBR,EAAWO,KAAK,CAAEC,EAAGA,IAIrBR,EAAWO,KAAK,CAAEC,EAAGA,IAIrBR,EAAWO,KAAK,CAAEH,EAAOR,EAAMY,KAE/BJ,IAKF,IAAK,IAAII,EAAIV,EAAOU,GAAKT,EAAKS,IAC7BZ,EAAMY,GAAKX,EAAUW,GAvFtBC,CAAUb,EAAOC,EAAWC,EAAOG,EAAQF,EAAKC,IA2F1C,SAASU,EAAWd,EAAOI,GAKjC,IAJA,IAEIW,EAFAC,GAAO,EACPC,EAAY,EAGTD,GAAM,CACZA,GAAO,EAEP,IAAK,IAAIJ,EAAI,EAAGA,EAAIZ,EAAMkB,OAASD,EAAWL,IAC7CR,EAAWO,KAAK,CAAEC,EAAGA,EAAI,IACzBR,EAAWO,KAAK,CAAEC,EAAGA,EAAI,IAErBZ,EAAMY,GAAKZ,EAAMY,EAAI,IACxBI,GAAO,EAEPZ,EAAWO,KAAK,EAAE,EAAMC,EAAGA,EAAI,EAAGZ,EAAMY,GAAIZ,EAAMY,EAAI,KAEtDG,EAAOf,EAAMY,GACbZ,EAAMY,GAAKZ,EAAMY,EAAI,GACrBZ,EAAMY,EAAI,GAAKG,GAEfX,EAAWO,KAAK,EAAE,EAAOC,EAAGA,EAAI,EAAGZ,EAAMY,GAAIZ,EAAMY,EAAI,KAGzDK,KAIK,SAASE,EAASnB,EAAOI,GAG/B,IAFA,IAAIgB,EAAO,CAAE,MAEJR,EAAI,EAAGA,EAAIZ,EAAMkB,OAAQN,IACjCS,EAAWD,EAAMpB,EAAMY,GAAIR,GAG5B,IAAK,IAAIQ,EAAI,EAAGA,EAAIZ,EAAMkB,OAAQN,IACjCZ,EAAMY,GAAKU,EAAWF,EAAMR,EAAGR,GAIjC,SAASiB,EAAWD,EAAMG,EAAKnB,GAa9B,GAZAgB,EAAKT,KAAKY,GAMVnB,EAAWO,KAAK,CAAES,EAAKF,OAAS,EAAGE,EAAKF,OAAS,IAEjDd,EAAWO,KAAK,CAAES,EAAKF,OAAS,EAAGE,EAAKF,OAAS,IAEjDd,EAAWO,KAAK,CAAES,EAAKF,OAAS,EAAGE,EAAKF,OAAS,EAAGK,EAAKA,IAErDH,EAAKF,OAAS,EAIjB,IAHA,IAAIM,EAAYJ,EAAKF,OAAS,EAC1BO,EAAanB,KAAKC,MAAMiB,EAAY,GAEjCJ,EAAKI,GAAaJ,EAAKK,IAAa,CAE1CrB,EAAWO,KAAK,CAAEa,EAAY,EAAGC,EAAa,IAE9CrB,EAAWO,KAAK,CAAEa,EAAY,EAAGC,EAAa,IAE9CrB,EAAWO,KAAK,CAAEa,EAAY,EAAGC,EAAa,EAAGL,EAAKI,GAAYJ,EAAKK,KAN7B,MAQF,CAAEL,EAAKK,GAAaL,EAAKI,IAKjE,GALEJ,EAAKI,GARmC,KAQvBJ,EAAKK,GARkB,KAU1CD,EAAYC,EACZA,EAAanB,KAAKC,MAAMiB,EAAY,GAEhCA,GAAa,EAAG,OAKvB,SAASF,EAAWF,EAAMM,EAAWtB,GACpC,IAAIuB,EAAUP,EAAK,GAEnB,KAAIA,EAAKF,OAAS,GAwDX,OAAO,KAvDb,IAAIO,EAAa,EACbG,EAAgB,EAAIH,EACpBI,EAAiB,EAAIJ,EAAa,EAYtC,GATArB,EAAWO,KAAK,CAAES,EAAKF,OAAS,EAAG,IAEnCd,EAAWO,KAAK,CAAES,EAAKF,OAAS,EAAG,IAEnCd,EAAWO,KAAK,CAAES,EAAKF,OAAS,EAAG,EAAGE,EAAKA,EAAKF,OAAS,GAAIS,IAE7DP,EAAK,GAAKA,EAAKA,EAAKF,OAAS,GAC7BE,EAAKU,OAAOV,EAAKF,OAAS,GAEN,IAAhBE,EAAKF,aACF,GAAoB,IAAhBE,EAAKF,QACf,GAAIE,EAAKK,GAAcL,EAAKQ,GAAgB,CAE3CxB,EAAWO,KAAK,CAAEiB,EAAgB,EAAGH,EAAa,IAElDrB,EAAWO,KAAK,CAAEiB,EAAgB,EAAGH,EAAa,IAElDrB,EAAWO,KAAK,CAAEiB,EAAgB,EAAGH,EAAa,EAAGL,EAAKQ,GAAgBR,EAAKK,KANpC,MAQC,CAAEL,EAAKQ,GAAgBR,EAAKK,IAAtEL,EAAKK,GARoC,KAQvBL,EAAKQ,GARkB,WAW5C,KAAOR,EAAKK,IAAeL,EAAKQ,IAAkBR,EAAKK,IAAeL,EAAKS,IAAiB,CAC3F,GAAIT,EAAKQ,GAAiBR,EAAKS,GAAiB,CAE/CzB,EAAWO,KAAK,CAAEiB,EAAgB,EAAGH,EAAa,IAElDrB,EAAWO,KAAK,CAAEiB,EAAgB,EAAGH,EAAa,IAElDrB,EAAWO,KAAK,CAAEiB,EAAgB,EAAGH,EAAa,EAAGL,EAAKQ,GAAgBR,EAAKK,KANhC,MAQH,CAAEL,EAAKQ,GAAgBR,EAAKK,IAAtEL,EAAKK,GARwC,KAQ3BL,EAAKQ,GARsB,KAS/CH,EAAaG,MACP,CAENxB,EAAWO,KAAK,CAAEkB,EAAiB,EAAGJ,IAEtCrB,EAAWO,KAAK,CAAEkB,EAAiB,EAAGJ,IAEtCrB,EAAWO,KAAK,CAAEkB,EAAiB,EAAGJ,EAAa,EAAGL,EAAKS,GAAiBT,EAAKK,KAN3E,MAQuC,CAAEL,EAAKS,GAAiBT,EAAKK,IAAxEL,EAAKK,GARD,KAQcL,EAAKS,GARnB,KASNJ,EAAaI,EAKd,GAFAA,EAAiB,EAAIJ,EAAa,OAENM,IAAxBX,EAHJQ,EAAgB,EAAIH,SAG8CM,IAAzBX,EAAKS,GAA+B,MAKhF,OAAOF,EAGD,SAASK,EAAUhC,EAAOE,EAAOC,EAAKC,GAC5C,IAAI6B,EAEJ,KAAI9B,EAAMD,EAAQ,GAAlB,CAEA+B,EAgBD,SAA4BjC,EAAOE,EAAOC,EAAKC,GAC9C,IAAI8B,EAAYhC,EACZiC,EAAahC,EAAM,EACnB8B,EAAa9B,EAEjB,KAAO+B,GAAaC,GAAY,CAC/B,KAAOnC,EAAMkC,GAAalC,EAAMiC,IAC/B7B,EAAWO,KAAK,CAAEuB,EAAWD,IAC7B7B,EAAWO,KAAK,CAAEuB,EAAWD,IAC7B7B,EAAWO,KAAK,CAAEuB,EAAWD,EAAYjC,EAAMiC,GAAajC,EAAMkC,KAElEA,IAGD,KAAOlC,EAAMmC,GAAcnC,EAAMiC,IAChC7B,EAAWO,KAAK,CAAEwB,EAAYF,IAC9B7B,EAAWO,KAAK,CAAEwB,EAAYF,IAC9B7B,EAAWO,KAAK,CAAEwB,EAAYF,EAAYjC,EAAMiC,GAAajC,EAAMmC,KAEnEA,IAED,GAAID,GAAaC,EAAY,CAC5B/B,EAAWO,KAAK,CAAEuB,EAAWC,IAC7B/B,EAAWO,KAAK,CAAEuB,EAAWC,IAC7B/B,EAAWO,KAAK,CAAEuB,EAAWC,EAAYnC,EAAMkC,GAAYlC,EAAMmC,KAEjE,IAAIpB,EAAOf,EAAMkC,GACjBlC,EAAMkC,GAAalC,EAAMmC,GACzBnC,EAAMmC,GAAcpB,EAEpBmB,IACAC,KAKF,OAFAF,EAAaC,EAlDAE,CAAmBpC,EAAOE,EAAOC,EAAKC,GAEnDA,EAAWO,KAAK,CAAEsB,EAAY9B,IAC9BC,EAAWO,KAAK,CAAEsB,EAAY9B,IAC9BC,EAAWO,KAAK,CAAEsB,EAAY9B,EAAKH,EAAMiC,GAAajC,EAAMG,KAE5D,IAAIY,EAAOf,EAAMiC,GACjBjC,EAAMiC,GAAcjC,EAAMG,GAC1BH,EAAMG,GAAOY,EAGbiB,EAAUhC,EAAOE,EAAO+B,EAAa,EAAG7B,GAExC4B,EAAUhC,EAAOiC,EAAa,EAAG9B,EAAKC,IC/PvC,IAsXeiC,E,kDA9Vd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZvC,MAAO,IAHU,E,gEAQlBwC,KAAKC,e,mCAIL,IAAMzC,EAAQ,GAGR0C,EACLpC,KAAKC,MApCc,IAoCPoC,OAAOC,WAxBF,IAwBN,IAAgF,EACtFC,EAASvC,KAAKC,MAjCC,IAiCKoC,OAAOG,aACjCC,QAAQC,IAAIN,GACZ,IAAK,IAAI9B,EAAI,EAAGA,EAAI8B,EAAa9B,IAAK,CACrC,IAAIW,EAAMjB,KAAKC,MAAMD,KAAK2C,SAAWJ,EAAS,GAAK,EACnD7C,EAAMW,KAAKY,GAEZiB,KAAKU,SAAS,CAAElD,Y,kCAOhB,IAAMI,EAAa,GACXJ,EAAUwC,KAAKD,MAAfvC,MACRD,EAAUC,EAAOA,EAAMmD,QAAS,EAAGnD,EAAMkB,OAAS,EAAGd,GACrD2C,QAAQC,IAAR,yBAzDe,EAyDe5C,EAAWc,OAAoB,MAE7D,IATW,eASFN,GACR,IAAMwC,EAAOC,SAASC,uBAAuB,aAE7CC,YAAW,WAAO,IAAD,cACOnD,EAAWQ,GADlB,GACR4C,EADQ,KACFC,EADE,mBAEUrD,EAAWQ,GAFrB,GAERJ,EAFQ,KAEDqC,EAFC,KAIZjC,EAAI,IAAM,GAEbwC,EAAKI,GAAME,MAAMC,gBAjDC,MAkDlBP,EAAKK,GAAMC,MAAMC,gBAlDC,OAmDR/C,EAAI,IAAM,GAEpBwC,EAAKI,GAAME,MAAMC,gBApDH,UAqDdP,EAAKK,GAAMC,MAAMC,gBArDH,WAwDdP,EAAK5C,GAAOkD,MAAMb,OAAlB,UAA8BA,EAA9B,QA5EY,EAgFXjC,IArBKA,EAAI,EAAGA,EAAIR,EAAWc,OAAQN,IAAM,EAApCA,GAwBT4B,KAAKoB,aAnFU,EAmFGxD,EAAWc,OAAmB,W,mCAGnC,IACLlB,EAAUwC,KAAKD,MAAfvC,MACFI,EAAa,GACnBU,EAAWd,EAAOI,GAClB2C,QAAQC,IAAR,yBA1Fe,EA0Fe5C,EAAWc,OAAoB,MAE7D,IANY,eAMHN,GACR,IAAMwC,EAAOC,SAASC,uBAAT,aAEbC,YAAW,WACV,GAAI3C,EAAI,IAAM,EAAG,CAAC,IAAD,cACOR,EAAWQ,GADlB,GACR4C,EADQ,KACFC,EADE,KAGhBL,EAAKI,GAAME,MAAMC,gBAhFC,MAiFlBP,EAAKK,GAAMC,MAAMC,gBAjFC,WAkFZ,GAAI/C,EAAI,IAAM,EAAG,CAAC,IAAD,cACAR,EAAWQ,GADX,GACf4C,EADe,KACTC,EADS,KAGvBL,EAAKI,GAAME,MAAMC,gBApFH,UAqFdP,EAAKK,GAAMC,MAAMC,gBArFH,cAsFR,CAAC,IAAD,cAC+CvD,EAAWQ,GAD1D,GACEI,EADF,KACQwC,EADR,KACcC,EADd,KACoBI,EADpB,KACgCC,EADhC,KAGF9C,IACHoC,EAAKI,GAAME,MAAMb,OAAjB,UAA6BiB,EAA7B,MACAV,EAAKK,GAAMC,MAAMb,OAAjB,UAA6BgB,EAA7B,UA/GW,EAkHXjD,IAtBKA,EAAI,EAAGA,EAAIR,EAAWc,OAAQN,IAAM,EAApCA,GAyBT4B,KAAKoB,aArHU,EAqHGxD,EAAWc,OAAmB,W,iCAGrC,IACHlB,EAAUwC,KAAKD,MAAfvC,MACFI,EAAa,GACnBe,EAASnB,EAAOI,GAChB2C,QAAQC,IAAR,yBA5He,EA4He5C,EAAWc,OAAoB,MAE7D,IANU,eAMDN,GACR,IAAMwC,EAAOC,SAASC,uBAAT,aAEbC,YAAW,WACV,GAAI3C,EAAI,IAAM,EAAG,CAAC,IAAD,cACOR,EAAWQ,GADlB,GACR4C,EADQ,KACFC,EADE,KAGhBL,EAAKI,GAAME,MAAMC,gBAlHC,MAmHlBP,EAAKK,GAAMC,MAAMC,gBAnHC,WAoHZ,GAAI/C,EAAI,IAAM,EAAG,CAAC,IAAD,cACAR,EAAWQ,GADX,GACf4C,EADe,KACTC,EADS,KAGvBL,EAAKI,GAAME,MAAMC,gBAtHH,UAuHdP,EAAKK,GAAMC,MAAMC,gBAvHH,cAwHR,CAAC,IAAD,cACyCvD,EAAWQ,GADpD,GACE4C,EADF,KACQC,EADR,KACcI,EADd,KAC0BC,EAD1B,KAGNV,EAAKI,GAAME,MAAMb,OAAjB,UAA6BiB,EAA7B,MACAV,EAAKK,GAAMC,MAAMb,OAAjB,UAA6BgB,EAA7B,SAhJY,EAkJXjD,IApBKA,EAAI,EAAGA,EAAIR,EAAWc,OAAQN,IAAM,EAApCA,GAuBT4B,KAAKoB,aArJU,EAqJGxD,EAAWc,OAAmB,W,kCAGpC,IACJlB,EAAUwC,KAAKD,MAAfvC,MACFI,EAAa,GACnB4B,EAAUhC,EAAO,EAAGA,EAAMkB,OAAS,EAAGd,GACtC2C,QAAQC,IAAR,yBA5Je,EA4Je5C,EAAWc,OAAoB,MAE7D,IANW,eAMFN,GACR,IAAMwC,EAAOC,SAASC,uBAAT,aAEbC,YAAW,WACV,GAAI3C,EAAI,IAAM,EAAG,CAAC,IAAD,cACOR,EAAWQ,GADlB,GACR4C,EADQ,KACFC,EADE,KAGhBL,EAAKI,GAAME,MAAMC,gBAlJC,MAmJlBP,EAAKK,GAAMC,MAAMC,gBAnJC,WAoJZ,GAAI/C,EAAI,IAAM,EAAG,CAAC,IAAD,cACAR,EAAWQ,GADX,GACf4C,EADe,KACTC,EADS,KAGvBL,EAAKI,GAAME,MAAMC,gBAtJH,UAuJdP,EAAKK,GAAMC,MAAMC,gBAvJH,cAwJR,CAAC,IAAD,cACyCvD,EAAWQ,GADpD,GACE4C,EADF,KACQC,EADR,KACcI,EADd,KAC0BC,EAD1B,KAGNV,EAAKI,GAAME,MAAMb,OAAjB,UAA6BiB,EAA7B,MACAV,EAAKK,GAAMC,MAAMb,OAAjB,UAA6BgB,EAA7B,SAhLY,EAkLXjD,IApBKA,EAAI,EAAGA,EAAIR,EAAWc,OAAQN,IAAM,EAApCA,GAuBT4B,KAAKoB,aArLU,EAqLGxD,EAAWc,OAAmB,W,mCAGpC6C,EAAMC,GAClB,IAAMC,EAAU,CAAE,WAAY,QAAS,QAAS,QAAS,SAGzDA,EAAQC,SAAQ,SAACC,GAChBd,SAASe,eAAeD,GAASE,UAAW,EAC5ChB,SAASe,eAAeD,GAAST,MAAMY,MAAQ,UAGhDjB,SAASe,eAAeJ,GAAIN,MAAMC,gBAAkB,UACpDN,SAASe,eAAeJ,GAAIN,MAAMa,OAAS,oBAE3ChB,YAAW,WACVU,EAAQC,SAAQ,SAACC,GAChBd,SAASe,eAAeD,GAASE,UAAW,EAC5ChB,SAASe,eAAeD,GAAST,MAAMY,MAAQ,WAGhDjB,SAASe,eAAeJ,GAAIN,MAAMC,gBAAkB,GACpDN,SAASe,eAAeJ,GAAIN,MAAMa,OAAS,GAG3C,IADA,IAAMnB,EAAOC,SAASC,uBAAT,aACJ1C,EAAI,EAAGA,EAAIwC,EAAKlC,OAAQN,IAAKwC,EAAKxC,GAAG8C,MAAMC,gBAzLlC,SA0LhBI,EArBiB,KAuBpB,IAAIS,EAAclE,KAAKmE,KAAKV,EAAO,KAC/BW,EAAQrB,SAASe,eAAe,SAChCO,EAAe,EACnBD,EAAME,YAAN,OAEAF,EAAMhB,MAAMY,MAAQ,GACpBI,EAAMhB,MAAMC,gBAAkB,GAE9B,IAjCsB,eAiCb/C,GACR,IAAIiE,EAAG,UAAMvE,KAAKC,MAAMoE,EAAe,KACnCG,EAAUH,EAAe,GAAK,GAApB,WAA6BA,EAAe,IAA5C,UAAsDA,EAAe,IACnFA,IACApB,YAAW,WACVmB,EAAME,YAAN,UAAuBC,EAAvB,YAA8BC,KACxB,IAAJlE,IANKA,EAAI,EAAGA,EAAI4D,EAAa5D,IAAM,EAA9BA,GAST2C,YAAW,WACVmB,EAAMhB,MAAMY,MAAZ,OACAI,EAAMhB,MAAMC,gBAAZ,YACgB,IAAda,K,2BAGCO,GACJ,IAAK,IAAInE,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAO7B,IANA,IAAMZ,EAAQ,GACRI,EAAa,GAEbsC,EAAcpC,KAAKC,MAzON,GAyOYoC,OAAOC,WAAP,IACzBC,EAASvC,KAAKC,MAtOA,IAsOMoC,OAAOG,aAExBlC,EAAI,EAAGA,EAAI8B,EAAa9B,IAAK,CACrC,IAAIW,EAAMjB,KAAKC,MAAMD,KAAK2C,SAAWJ,EAAS,GAAK,EACnD7C,EAAMW,KAAKY,GAGZ,IAAMyD,EAAc,UAAQhF,GACtBiF,EAAe,UAAQjF,GACvBkF,EAAa,UAAQlF,GACrBmF,EAAc,UAAQnF,GAE5BD,EAAUiF,EAAgBA,EAAelD,SAAU,EAAGkD,EAAe9D,OAAS,EAAGd,GACjFU,EAAWmE,EAAiB7E,GAC5Be,EAAS+D,EAAe9E,GACxB4B,EAAUmD,EAAgB,EAAGA,EAAejE,OAAS,EAAGd,GAExDJ,EAAMoF,MAAK,SAASC,EAAGC,GACtB,OAAOD,EAAIC,KAQZ,IALA,IAAIC,GAAY,EACZC,GAAa,EACbC,GAAW,EACXC,GAAY,EAEP9E,EAAI,EAAGA,EAAIZ,EAAMkB,OAAQN,IAC7BZ,EAAMY,KAAOoE,EAAepE,KAAI2E,GAAY,GAC5CvF,EAAMY,KAAOqE,EAAgBrE,KAAI4E,GAAa,GAC9CxF,EAAMY,KAAOsE,EAAcA,EAAchE,OAAS,EAAIN,KAAI6E,GAAW,GACrEzF,EAAMY,KAAOuE,EAAevE,KAAI8E,GAAY,GAG9B,IAAfX,EAAkBhC,QAAQC,IAAR,4BAAiCuC,IAC/B,IAAfR,EAAkBhC,QAAQC,IAAR,6BAAkCwC,IACrC,IAAfT,EAAkBhC,QAAQC,IAAR,2BAAgCyC,IACtD1C,QAAQC,IAAR,4BAAiC0C,O,+BAG9B,IAAD,OACA1F,EAAUwC,KAAKD,MAAfvC,MAER,OACC,6BACC,yBAAK2F,UAAU,eACd,yBAAKA,UAAU,kBACd,4BACC3B,GAAG,WACH2B,UAAU,aACVjC,MAAO,CAAEkC,QAAQ,SACjBC,QAAS,WACR,EAAKpD,aAEL,IADA,IAAMW,EAAOC,SAASC,uBAAT,aACJ1C,EAAI,EAAGA,EAAIwC,EAAKlC,OAAQN,IAAKwC,EAAKxC,GAAG8C,MAAMC,gBAjRxC,QAmRZ,IAAIe,EAAQrB,SAASe,eAAe,SAEpCM,EAAMhB,MAAMY,MAAQ,GACpBI,EAAMhB,MAAMC,gBAAkB,GAC9Be,EAAME,YAAc,SAbtB,cAmBD,yBAAKe,UAAU,cACd,4BACC3B,GAAG,QACH2B,UAAU,aACVjC,MAAO,CAAEkC,QAAQ,SACjBC,QAAS,kBAAM,EAAK9F,cAJrB,cAQA,4BACCiE,GAAG,QACH2B,UAAU,aACVjC,MAAO,CAAEkC,QAAQ,SACjBC,QAAS,kBAAM,EAAK/E,eAJrB,eAQA,4BACCkD,GAAG,QACH2B,UAAU,aACVjC,MAAO,CAAEkC,QAAQ,SACjBC,QAAS,kBAAM,EAAK1E,aAJrB,aAQA,4BACC6C,GAAG,QACH2B,UAAU,aACVjC,MAAO,CAAEkC,QAAQ,SACjBC,QAAS,kBAAM,EAAK7D,cAJrB,eASD,yBAAK2D,UAAU,iBACd,uBAAGA,UAAU,SAAb,iBAGF,yBAAK3B,GAAG,QAAQ2B,UAAU,QAAQjC,MAAO,CAAEoC,MAAM,GAAD,OArUhC,GAqUgC,QAAhD,QAGA,yBAAKH,UAAU,mBAGd,yBACCA,UAAU,qBACVjC,MAAO,CACNkC,QAAQ,eACR/C,OAAO,GAAD,OAAKvC,KAAKC,MAvVA,IAuVMoC,OAAOG,aAAgC,EAAvD,MACNgD,MAAM,GAAD,OArVM,EAqVN,MACLC,OAAO,KAAD,OAnVE,EAmVF,SAGP/F,EAAMgG,KAAI,SAACC,EAAOC,GAAR,OACV,yBACCP,UAAU,YACVQ,IAAKD,EACLxC,MAAO,CACNb,OAAO,GAAD,OAAKoD,EAAL,MACNH,MAAM,GAAD,OA/VK,EA+VL,MACLC,OAAO,KAAD,OA7VC,EA6VD,MACNpC,gBA1VY,oB,GAKYyC,IAAMC,WChBvBC,MARf,WACC,OACC,6BACC,kBAAC,EAAD,QCKiBC,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxD,SAASe,eAAe,SDyHpB,kBAAmB0C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.696de9b4.chunk.js","sourcesContent":["export function mergeSort(array, tempArray, start, end, animations) {\n\tconst middle = Math.floor((start + end) / 2);\n\n\t// Base case\n\tif (start >= end) return;\n\telse {\n\t\t// Array can be divided, divide array and call mergeSort() again\n\t\tmergeSort(array, tempArray, start, middle, animations);\n\t\tmergeSort(array, tempArray, middle + 1, end, animations);\n\t}\n\n\t// Sort divided arrays\n\tsortArray(array, tempArray, start, middle, end, animations);\n}\n\nfunction sortArray(array, tempArray, start, middle, end, animations) {\n\tlet index = start;\n\tlet firstHalf = start;\n\tlet secondHalf = middle + 1;\n\n\t// As long as we haven't reach the end of the first half of the array\n\t// or the second half, continue to compare values\n\twhile (firstHalf <= middle && secondHalf <= end) {\n\t\t// Pushes index of what bars are being compared so\n\t\t// they can be shown as 'comparison' colour\n\t\tanimations.push([ firstHalf, secondHalf ]);\n\t\t// Pushes same index again to change colour of bars being\n\t\t// compared to new 'sorted' colour\n\t\tanimations.push([ firstHalf, secondHalf ]);\n\n\t\t// Compare values between the first and second half of the array\n\t\t// and update the tmeporary array accordingly to whichever value is lower\n\t\tif (array[firstHalf] <= array[secondHalf]) {\n\t\t\ttempArray[index] = array[firstHalf];\n\n\t\t\t// Pushes the index of the bar to be changed along with it's\n\t\t\t// new corresponding height value\n\t\t\tanimations.push([ index, array[firstHalf] ]);\n\n\t\t\tfirstHalf++;\n\t\t} else {\n\t\t\ttempArray[index] = array[secondHalf];\n\n\t\t\t// Pushes the index of the bar to be changed along with it's\n\t\t\t// new corresponding height value\n\t\t\tanimations.push([ index, array[secondHalf] ]);\n\n\t\t\tsecondHalf++;\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If there are any leftover elements in the first half\n\t// copy them into the temporary array\n\tif (firstHalf <= middle) {\n\t\tfor (let i = firstHalf; i <= middle; i++) {\n\t\t\ttempArray[index] = array[i];\n\n\t\t\t// Pushes index of what bars are being compared so\n\t\t\t// they can be shown as 'comparison' colour\n\t\t\tanimations.push([ i, i ]);\n\n\t\t\t// Pushes same index again to change colour of bars being\n\t\t\t// compared to new 'sorted' colour\n\t\t\tanimations.push([ i, i ]);\n\n\t\t\t// Pushes the index of the bar to be changed along with it's\n\t\t\t// new corresponding height value\n\t\t\tanimations.push([ index, array[i] ]);\n\n\t\t\tindex++;\n\t\t}\n\t}\n\n\t// If there are any leftover elements in the second half\n\t// copy them into the temporary array\n\tif (secondHalf <= end) {\n\t\tfor (let i = secondHalf; i <= end; i++) {\n\t\t\ttempArray[index] = array[i];\n\n\t\t\t// Pushes index of what bars are being compared so\n\t\t\t// they can be shown as 'comparison' colour\n\t\t\tanimations.push([ i, i ]);\n\n\t\t\t// Pushes same index again to change colour of bars being\n\t\t\t// compared to new 'sorted' colour\n\t\t\tanimations.push([ i, i ]);\n\n\t\t\t// Pushes the index of the bar to be changed along with it's\n\t\t\t// new corresponding height value\n\t\t\tanimations.push([ index, array[i] ]);\n\n\t\t\tindex++;\n\t\t}\n\t}\n\n\t// Copy the now sorted interval in the temporary array to the main array\n\tfor (let i = start; i <= end; i++) {\n\t\tarray[i] = tempArray[i];\n\t}\n}\n\nexport function bubbleSort(array, animations) {\n\tlet flag = true;\n\tlet loopCount = 1;\n\tlet temp;\n\n\twhile (flag) {\n\t\tflag = false;\n\n\t\tfor (let i = 0; i < array.length - loopCount; i++) {\n\t\t\tanimations.push([ i, i + 1 ]);\n\t\t\tanimations.push([ i, i + 1 ]);\n\n\t\t\tif (array[i] > array[i + 1]) {\n\t\t\t\tflag = true;\n\n\t\t\t\tanimations.push([ true, i, i + 1, array[i], array[i + 1] ]);\n\n\t\t\t\ttemp = array[i];\n\t\t\t\tarray[i] = array[i + 1];\n\t\t\t\tarray[i + 1] = temp;\n\t\t\t} else {\n\t\t\t\tanimations.push([ false, i, i + 1, array[i], array[i + 1] ]);\n\t\t\t}\n\t\t}\n\t\tloopCount++;\n\t}\n}\n\nexport function heapSort(array, animations) {\n\tlet heap = [ null ];\n\n\tfor (let i = 0; i < array.length; i++) {\n\t\theapInsert(heap, array[i], animations);\n\t}\n\n\tfor (let i = 0; i < array.length; i++) {\n\t\tarray[i] = heapRemove(heap, i, animations);\n\t}\n}\n\nfunction heapInsert(heap, num, animations) {\n\theap.push(num);\n\n\t// #########################################################################\n\t// This is for the case when the number is just inserted into the heap array\n\t// #########################################################################\n\t// Comparison animation pushed to change bar to comparison colour\n\tanimations.push([ heap.length - 2, heap.length - 2 ]);\n\t// Comparison animation pushed again to change bar to sorted colour\n\tanimations.push([ heap.length - 2, heap.length - 2 ]);\n\t// Index and height of bars pushed to be swapped\n\tanimations.push([ heap.length - 2, heap.length - 2, num, num ]);\n\n\tif (heap.length > 2) {\n\t\tlet childNode = heap.length - 1;\n\t\tlet parentNode = Math.floor(childNode / 2);\n\n\t\twhile (heap[childNode] > heap[parentNode]) {\n\t\t\t// Comparison animation pushed to change bar to comparison colour\n\t\t\tanimations.push([ childNode - 1, parentNode - 1 ]);\n\t\t\t// Comparison animation pushed again to change bar to sorted colour\n\t\t\tanimations.push([ childNode - 1, parentNode - 1 ]);\n\t\t\t// Index and height of bars pushed to be swapped\n\t\t\tanimations.push([ childNode - 1, parentNode - 1, heap[childNode], heap[parentNode] ]);\n\n\t\t\t[ heap[childNode], heap[parentNode] ] = [ heap[parentNode], heap[childNode] ];\n\n\t\t\tchildNode = parentNode;\n\t\t\tparentNode = Math.floor(childNode / 2);\n\n\t\t\tif (childNode <= 1) break;\n\t\t}\n\t}\n}\n\nfunction heapRemove(heap, iteration, animations) {\n\tlet largest = heap[1];\n\n\tif (heap.length > 1) {\n\t\tlet parentNode = 1;\n\t\tlet childNodeLeft = 2 * parentNode;\n\t\tlet childNodeRight = 2 * parentNode + 1;\n\n\t\t// Comparison animation pushed to change bar to comparison colour\n\t\tanimations.push([ heap.length - 2, 0 ]);\n\t\t// Comparison animation pushed again to change bar to sorted colour\n\t\tanimations.push([ heap.length - 2, 0 ]);\n\t\t// Index and height of bars pushed to be swapped\n\t\tanimations.push([ heap.length - 2, 0, heap[heap.length - 1], largest ]);\n\n\t\theap[1] = heap[heap.length - 1];\n\t\theap.splice(heap.length - 1);\n\n\t\tif (heap.length === 2) {\n\t\t} else if (heap.length === 3) {\n\t\t\tif (heap[parentNode] < heap[childNodeLeft]) {\n\t\t\t\t// Comparison animation pushed to change bar to comparison colour\n\t\t\t\tanimations.push([ childNodeLeft - 1, parentNode - 1 ]);\n\t\t\t\t// Comparison animation pushed again to change bar to sorted colour\n\t\t\t\tanimations.push([ childNodeLeft - 1, parentNode - 1 ]);\n\t\t\t\t// Index and height of bars pushed to be swapped\n\t\t\t\tanimations.push([ childNodeLeft - 1, parentNode - 1, heap[childNodeLeft], heap[parentNode] ]);\n\n\t\t\t\t[ heap[parentNode], heap[childNodeLeft] ] = [ heap[childNodeLeft], heap[parentNode] ];\n\t\t\t}\n\t\t} else {\n\t\t\twhile (heap[parentNode] <= heap[childNodeLeft] || heap[parentNode] <= heap[childNodeRight]) {\n\t\t\t\tif (heap[childNodeLeft] > heap[childNodeRight]) {\n\t\t\t\t\t// Comparison animation pushed to change bar to comparison colour\n\t\t\t\t\tanimations.push([ childNodeLeft - 1, parentNode - 1 ]);\n\t\t\t\t\t// Comparison animation pushed again to change bar to sorted colour\n\t\t\t\t\tanimations.push([ childNodeLeft - 1, parentNode - 1 ]);\n\t\t\t\t\t// Index and height of bars pushed to be swapped\n\t\t\t\t\tanimations.push([ childNodeLeft - 1, parentNode - 1, heap[childNodeLeft], heap[parentNode] ]);\n\n\t\t\t\t\t[ heap[parentNode], heap[childNodeLeft] ] = [ heap[childNodeLeft], heap[parentNode] ];\n\t\t\t\t\tparentNode = childNodeLeft;\n\t\t\t\t} else {\n\t\t\t\t\t// Comparison animation pushed to change bar to comparison colour\n\t\t\t\t\tanimations.push([ childNodeRight - 1, parentNode ]);\n\t\t\t\t\t// Comparison animation pushed again to change bar to sorted colour\n\t\t\t\t\tanimations.push([ childNodeRight - 1, parentNode ]);\n\t\t\t\t\t// Index and height of bars pushed to be swapped\n\t\t\t\t\tanimations.push([ childNodeRight - 1, parentNode - 1, heap[childNodeRight], heap[parentNode] ]);\n\n\t\t\t\t\t[ heap[parentNode], heap[childNodeRight] ] = [ heap[childNodeRight], heap[parentNode] ];\n\t\t\t\t\tparentNode = childNodeRight;\n\t\t\t\t}\n\t\t\t\tchildNodeLeft = 2 * parentNode;\n\t\t\t\tchildNodeRight = 2 * parentNode + 1;\n\n\t\t\t\tif (heap[childNodeLeft] === undefined || heap[childNodeRight] === undefined) break;\n\t\t\t}\n\t\t}\n\t} else return null;\n\n\treturn largest;\n}\n\nexport function quickSort(array, start, end, animations) {\n\tlet pivotIndex = end;\n\n\tif (end - start < 1) return;\n\n\tpivotIndex = quickSortPartition(array, start, end, animations);\n\n\tanimations.push([ pivotIndex, end ]);\n\tanimations.push([ pivotIndex, end ]);\n\tanimations.push([ pivotIndex, end, array[pivotIndex], array[end] ]);\n\n\tlet temp = array[pivotIndex];\n\tarray[pivotIndex] = array[end];\n\tarray[end] = temp;\n\n\t// Sorting left of pivot index\n\tquickSort(array, start, pivotIndex - 1, animations);\n\t// Sorting right of pivot index\n\tquickSort(array, pivotIndex + 1, end, animations);\n}\n\nfunction quickSortPartition(array, start, end, animations) {\n\tlet leftIndex = start;\n\tlet rightIndex = end - 1;\n\tlet pivotIndex = end;\n\n\twhile (leftIndex <= rightIndex) {\n\t\twhile (array[leftIndex] < array[pivotIndex]) {\n\t\t\tanimations.push([ leftIndex, pivotIndex ]);\n\t\t\tanimations.push([ leftIndex, pivotIndex ]);\n\t\t\tanimations.push([ leftIndex, pivotIndex, array[pivotIndex], array[leftIndex] ]);\n\n\t\t\tleftIndex++;\n\t\t}\n\n\t\twhile (array[rightIndex] > array[pivotIndex]) {\n\t\t\tanimations.push([ rightIndex, pivotIndex ]);\n\t\t\tanimations.push([ rightIndex, pivotIndex ]);\n\t\t\tanimations.push([ rightIndex, pivotIndex, array[pivotIndex], array[rightIndex] ]);\n\n\t\t\trightIndex--;\n\t\t}\n\t\tif (leftIndex <= rightIndex) {\n\t\t\tanimations.push([ leftIndex, rightIndex ]);\n\t\t\tanimations.push([ leftIndex, rightIndex ]);\n\t\t\tanimations.push([ leftIndex, rightIndex, array[leftIndex], array[rightIndex] ]);\n\n\t\t\tlet temp = array[leftIndex];\n\t\t\tarray[leftIndex] = array[rightIndex];\n\t\t\tarray[rightIndex] = temp;\n\n\t\t\tleftIndex++;\n\t\t\trightIndex--;\n\t\t}\n\t}\n\tpivotIndex = leftIndex;\n\n\treturn pivotIndex;\n}\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport { mergeSort, bubbleSort, heapSort, quickSort } from '../SortingAlgorithms/sortingAlgorithms.js';\n\n// Speed of Animation in MS\nconst SPEED_MS = 3;\n\n// Change this percent to change the amount of the viewport width taken up by number bars\n// Range from 0 - 1\nconst WIDTH_PERCENT = 0.8;\n\n// Change this percent to change the amount of viewport heigh taken up by the number bars\n// Range from 0 - 1\nconst HEIGHT_PERCENT = 0.85;\n\n// This px value corresponds to the number bar width\nconst BAR_WIDTH = 8;\n\n// This px value corresponds to the number bar left & right margin\nconst MARGIN = 1;\n\nconst TIMER_WIDTH = 66;\n\nconst DEFAULT_COLOUR = `white`;\nconst COMPARISON_COLOUR = `red`;\nconst SORTED_COLOUR = `#006666`;\nconst COMPLTED_COLOUR = `teal`;\n\nclass SortingVisualizer extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tarray: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.resetArray();\n\t}\n\n\tresetArray() {\n\t\tconst array = [];\n\t\t// Minus 1 because there is an invisble max bar always in the array used to set\n\t\t// the height of the div while sorting is taking place\n\t\tconst arrayLength =\n\t\t\tMath.floor((window.innerWidth - TIMER_WIDTH) * WIDTH_PERCENT / (BAR_WIDTH + MARGIN * 2)) - 1;\n\t\tconst height = Math.floor(window.innerHeight * HEIGHT_PERCENT);\n\t\tconsole.log(arrayLength);\n\t\tfor (let i = 0; i < arrayLength; i++) {\n\t\t\tlet num = Math.floor(Math.random() * height + 1) + 5;\n\t\t\tarray.push(num);\n\t\t}\n\t\tthis.setState({ array });\n\t}\n\n\tmergeSort() {\n\t\t// Animating sequences are triplets where first pair says what values are being compared and to turn red\n\t\t// Second pair is the same values being compared and is used to turn to new 'sorted' colour\n\t\t// Third pair is the index and height, where index inidcates the bar and the height is the now new height value\n\t\tconst animations = [];\n\t\tconst { array } = this.state;\n\t\tmergeSort(array, array.slice(), 0, array.length - 1, animations);\n\t\tconsole.log(`Sorting speed: ${animations.length * SPEED_MS / 1000}`);\n\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst bars = document.getElementsByClassName('array-bar');\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst [ idx1, idx2 ] = animations[i];\n\t\t\t\tconst [ index, height ] = animations[i];\n\n\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\t// If first part of triple colour bars being compared to red\n\t\t\t\t\tbars[idx1].style.backgroundColor = COMPARISON_COLOUR;\n\t\t\t\t\tbars[idx2].style.backgroundColor = COMPARISON_COLOUR;\n\t\t\t\t} else if (i % 3 === 1) {\n\t\t\t\t\t// If second part of triple, colour bars being compared are changed to new sorted color\n\t\t\t\t\tbars[idx1].style.backgroundColor = SORTED_COLOUR;\n\t\t\t\t\tbars[idx2].style.backgroundColor = SORTED_COLOUR;\n\t\t\t\t} else {\n\t\t\t\t\t// If last part of triple, then change the height of the bar at the corresponding index\n\t\t\t\t\tbars[index].style.height = `${height}px`;\n\t\t\t\t}\n\t\t\t\t// i * SPEED_MS is required because all loops are run concurrently and this allows each loop to be delayed\n\t\t\t\t// by it's iteration count to give an appearance of the function being run sequentially\n\t\t\t}, i * SPEED_MS);\n\t\t}\n\n\t\tthis.whileRunning(animations.length * SPEED_MS, 'msort');\n\t}\n\n\tbubbleSort() {\n\t\tconst { array } = this.state;\n\t\tconst animations = [];\n\t\tbubbleSort(array, animations);\n\t\tconsole.log(`Sorting speed: ${animations.length * SPEED_MS / 1000}`);\n\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst bars = document.getElementsByClassName(`array-bar`);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\tconst [ idx1, idx2 ] = animations[i];\n\n\t\t\t\t\tbars[idx1].style.backgroundColor = COMPARISON_COLOUR;\n\t\t\t\t\tbars[idx2].style.backgroundColor = COMPARISON_COLOUR;\n\t\t\t\t} else if (i % 3 === 1) {\n\t\t\t\t\tconst [ idx1, idx2 ] = animations[i];\n\n\t\t\t\t\tbars[idx1].style.backgroundColor = SORTED_COLOUR;\n\t\t\t\t\tbars[idx2].style.backgroundColor = SORTED_COLOUR;\n\t\t\t\t} else {\n\t\t\t\t\tconst [ flag, idx1, idx2, idx1Height, idx2Height ] = animations[i];\n\n\t\t\t\t\tif (flag) {\n\t\t\t\t\t\tbars[idx1].style.height = `${idx2Height}px`;\n\t\t\t\t\t\tbars[idx2].style.height = `${idx1Height}px`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, i * SPEED_MS);\n\t\t}\n\n\t\tthis.whileRunning(animations.length * SPEED_MS, 'bsort');\n\t}\n\n\theapSort() {\n\t\tconst { array } = this.state;\n\t\tconst animations = [];\n\t\theapSort(array, animations);\n\t\tconsole.log(`Sorting speed: ${animations.length * SPEED_MS / 1000}`);\n\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst bars = document.getElementsByClassName(`array-bar`);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\tconst [ idx1, idx2 ] = animations[i];\n\n\t\t\t\t\tbars[idx1].style.backgroundColor = COMPARISON_COLOUR;\n\t\t\t\t\tbars[idx2].style.backgroundColor = COMPARISON_COLOUR;\n\t\t\t\t} else if (i % 3 === 1) {\n\t\t\t\t\tconst [ idx1, idx2 ] = animations[i];\n\n\t\t\t\t\tbars[idx1].style.backgroundColor = SORTED_COLOUR;\n\t\t\t\t\tbars[idx2].style.backgroundColor = SORTED_COLOUR;\n\t\t\t\t} else {\n\t\t\t\t\tconst [ idx1, idx2, idx1Height, idx2Height ] = animations[i];\n\n\t\t\t\t\tbars[idx1].style.height = `${idx2Height}px`;\n\t\t\t\t\tbars[idx2].style.height = `${idx1Height}px`;\n\t\t\t\t}\n\t\t\t}, i * SPEED_MS);\n\t\t}\n\n\t\tthis.whileRunning(animations.length * SPEED_MS, 'hsort');\n\t}\n\n\tquickSort() {\n\t\tconst { array } = this.state;\n\t\tconst animations = [];\n\t\tquickSort(array, 0, array.length - 1, animations);\n\t\tconsole.log(`Sorting speed: ${animations.length * SPEED_MS / 1000}`);\n\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst bars = document.getElementsByClassName(`array-bar`);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\tconst [ idx1, idx2 ] = animations[i];\n\n\t\t\t\t\tbars[idx1].style.backgroundColor = COMPARISON_COLOUR;\n\t\t\t\t\tbars[idx2].style.backgroundColor = COMPARISON_COLOUR;\n\t\t\t\t} else if (i % 3 === 1) {\n\t\t\t\t\tconst [ idx1, idx2 ] = animations[i];\n\n\t\t\t\t\tbars[idx1].style.backgroundColor = SORTED_COLOUR;\n\t\t\t\t\tbars[idx2].style.backgroundColor = SORTED_COLOUR;\n\t\t\t\t} else {\n\t\t\t\t\tconst [ idx1, idx2, idx1Height, idx2Height ] = animations[i];\n\n\t\t\t\t\tbars[idx1].style.height = `${idx2Height}px`;\n\t\t\t\t\tbars[idx2].style.height = `${idx1Height}px`;\n\t\t\t\t}\n\t\t\t}, i * SPEED_MS);\n\t\t}\n\n\t\tthis.whileRunning(animations.length * SPEED_MS, 'qsort');\n\t}\n\n\twhileRunning(time, id) {\n\t\tconst buttons = [ 'newarray', 'msort', 'hsort', 'bsort', 'qsort' ];\n\t\tconst HALF_SECOND = 500;\n\n\t\tbuttons.forEach((element) => {\n\t\t\tdocument.getElementById(element).disabled = true;\n\t\t\tdocument.getElementById(element).style.color = 'grey';\n\t\t});\n\n\t\tdocument.getElementById(id).style.backgroundColor = '#1e1e26';\n\t\tdocument.getElementById(id).style.border = '2px solid #444757';\n\n\t\tsetTimeout(() => {\n\t\t\tbuttons.forEach((element) => {\n\t\t\t\tdocument.getElementById(element).disabled = false;\n\t\t\t\tdocument.getElementById(element).style.color = 'white';\n\t\t\t});\n\n\t\t\tdocument.getElementById(id).style.backgroundColor = '';\n\t\t\tdocument.getElementById(id).style.border = '';\n\n\t\t\tconst bars = document.getElementsByClassName(`array-bar`);\n\t\t\tfor (let i = 0; i < bars.length; i++) bars[i].style.backgroundColor = COMPLTED_COLOUR;\n\t\t}, time + HALF_SECOND);\n\n\t\tlet timerLength = Math.ceil(time / 1000);\n\t\tlet timer = document.getElementById('timer');\n\t\tlet totalSeconds = 1;\n\t\ttimer.textContent = `0:01`;\n\n\t\ttimer.style.color = '';\n\t\ttimer.style.backgroundColor = '';\n\n\t\tfor (let i = 0; i < timerLength; i++) {\n\t\t\tlet min = `${Math.floor(totalSeconds / 60)}`;\n\t\t\tlet seconds = totalSeconds % 60 < 10 ? `0${totalSeconds % 60}` : `${totalSeconds % 60}`;\n\t\t\ttotalSeconds++;\n\t\t\tsetTimeout(() => {\n\t\t\t\ttimer.textContent = `${min}:${seconds}`;\n\t\t\t}, i * 1000);\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\ttimer.style.color = `grey`;\n\t\t\ttimer.style.backgroundColor = `#1e1e26`;\n\t\t}, timerLength * 1000);\n\t}\n\n\ttest(algorithim) {\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tconst array = [];\n\t\t\tconst animations = [];\n\n\t\t\tconst arrayLength = Math.floor(window.innerWidth * WIDTH_PERCENT / (BAR_WIDTH + MARGIN * 2));\n\t\t\tconst height = Math.floor(window.innerHeight * HEIGHT_PERCENT);\n\n\t\t\tfor (let i = 0; i < arrayLength; i++) {\n\t\t\t\tlet num = Math.floor(Math.random() * height + 1) + 5;\n\t\t\t\tarray.push(num);\n\t\t\t}\n\n\t\t\tconst mergeSortArray = [ ...array ];\n\t\t\tconst bubbleSortArray = [ ...array ];\n\t\t\tconst heapSortArray = [ ...array ];\n\t\t\tconst quickSortArray = [ ...array ];\n\n\t\t\tmergeSort(mergeSortArray, mergeSortArray.splice(), 0, mergeSortArray.length - 1, animations);\n\t\t\tbubbleSort(bubbleSortArray, animations);\n\t\t\theapSort(heapSortArray, animations);\n\t\t\tquickSort(quickSortArray, 0, quickSortArray.length - 1, animations);\n\n\t\t\tarray.sort(function(a, b) {\n\t\t\t\treturn a - b;\n\t\t\t});\n\n\t\t\tlet mergeFlag = true;\n\t\t\tlet bubbleFlag = true;\n\t\t\tlet heapFlag = true;\n\t\t\tlet quickFlag = true;\n\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tif (array[i] !== mergeSortArray[i]) mergeFlag = false;\n\t\t\t\tif (array[i] !== bubbleSortArray[i]) bubbleFlag = false;\n\t\t\t\tif (array[i] !== heapSortArray[heapSortArray.length - 1 - i]) heapFlag = false;\n\t\t\t\tif (array[i] !== quickSortArray[i]) quickFlag = false;\n\t\t\t}\n\n\t\t\tif (algorithim === 0) console.log(`MergeSort sorted: ${mergeFlag}`);\n\t\t\telse if (algorithim === 1) console.log(`BubbleSort sorted: ${bubbleFlag}`);\n\t\t\telse if (algorithim === 2) console.log(`HeapSort sorted: ${heapFlag}`);\n\t\t\telse console.log(`QuickSort sorted: ${quickFlag}`);\n\t\t}\n\t}\n\trender() {\n\t\tconst { array } = this.state;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"nav-wrapper\">\n\t\t\t\t\t<div className=\"generate-array\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tid=\"newarray\"\n\t\t\t\t\t\t\tclassName=\"nav-button\"\n\t\t\t\t\t\t\tstyle={{ display: `block` }}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.resetArray();\n\t\t\t\t\t\t\t\tconst bars = document.getElementsByClassName(`array-bar`);\n\t\t\t\t\t\t\t\tfor (let i = 0; i < bars.length; i++) bars[i].style.backgroundColor = DEFAULT_COLOUR;\n\n\t\t\t\t\t\t\t\tlet timer = document.getElementById('timer');\n\n\t\t\t\t\t\t\t\ttimer.style.color = '';\n\t\t\t\t\t\t\t\ttimer.style.backgroundColor = '';\n\t\t\t\t\t\t\t\ttimer.textContent = '0:00';\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tNew Array\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"sort-array\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tid=\"msort\"\n\t\t\t\t\t\t\tclassName=\"nav-button\"\n\t\t\t\t\t\t\tstyle={{ display: `block` }}\n\t\t\t\t\t\t\tonClick={() => this.mergeSort()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMerge Sort\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tid=\"bsort\"\n\t\t\t\t\t\t\tclassName=\"nav-button\"\n\t\t\t\t\t\t\tstyle={{ display: `block` }}\n\t\t\t\t\t\t\tonClick={() => this.bubbleSort()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBubble Sort\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tid=\"hsort\"\n\t\t\t\t\t\t\tclassName=\"nav-button\"\n\t\t\t\t\t\t\tstyle={{ display: `block` }}\n\t\t\t\t\t\t\tonClick={() => this.heapSort()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tHeap Sort\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tid=\"qsort\"\n\t\t\t\t\t\t\tclassName=\"nav-button\"\n\t\t\t\t\t\t\tstyle={{ display: `block` }}\n\t\t\t\t\t\t\tonClick={() => this.quickSort()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tQuick Sort\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"hide-if-small\">\n\t\t\t\t\t\t<p className=\"brand\">AMAN CHHINA</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"timer\" className=\"timer\" style={{ width: `${TIMER_WIDTH}px` }}>\n\t\t\t\t\t0:00\n\t\t\t\t</div>\n\t\t\t\t<div className=\"array-container\">\n\t\t\t\t\t{/* This div is created to have a fixed bar with a height that is the max possible height in the array.\n\t\t\t\t\t\tThis then allows the bars to not move while they are written over in Merge Sort */}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"array-fixed-height\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tdisplay: `inline-block`,\n\t\t\t\t\t\t\theight: `${Math.floor(window.innerHeight * HEIGHT_PERCENT) + 5}px`,\n\t\t\t\t\t\t\twidth: `${BAR_WIDTH}px`,\n\t\t\t\t\t\t\tmargin: `0 ${MARGIN}px`\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t{array.map((value, idx) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"array-bar\"\n\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\theight: `${value}px`,\n\t\t\t\t\t\t\t\twidth: `${BAR_WIDTH}px`,\n\t\t\t\t\t\t\t\tmargin: `0 ${MARGIN}px`,\n\t\t\t\t\t\t\t\tbackgroundColor: DEFAULT_COLOUR\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SortingVisualizer;\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx';\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<SortingVisualizer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}